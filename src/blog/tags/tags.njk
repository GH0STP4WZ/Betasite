---
layout: base.njk
title: Blog
subtitle: Filter posts by tags
pageIcon: 📝
---

<div class="blog-filter-page">
    <div class="container">
        <div class="filter-controls card">
            <h3>Filter by Tags</h3>
            <div class="tag-filters" id="tagFilters">
                {% for tag in collections.tagList %}
                <label class="tag-checkbox">
                    <input type="checkbox" value="{{ tag }}" data-tag="{{ tag }}">
                    <span class="tag-label">{{ tag }}</span>
                </label>
                {% endfor %}
            </div>
            <div class="filter-actions">
                <button id="clearFilters" class="btn-secondary">Clear All</button>
                <span id="resultCount" class="result-count">Showing all posts</span>
            </div>
        </div>
        <div class="blog-grid" id="blogGrid">
            {% for post in collections.posts %}
            <article class="blog-post card" data-tags='{{ post.data.tags | join(",") | safe }}'>
                <div class="post-header">
                    <div class="post-meta">
                        <time datetime="{{ post.data.date }}">{{ post.data.date | dateFormat }}</time>
                    </div>
                    <h2 class="post-title">
                        <a href="{{ post.url }}">{{ post.data.title }}</a>
                    </h2>
                    <p class="post-excerpt">
                        {{ post.templateContent | excerpt }}
                    </p>
                </div>
                <div class="post-footer">
                    {% if post.data.tags %}
                    <div class="post-tags">
                        {% for tag in post.data.tags %}
                        <span class="tag" data-tag="{{ tag }}">{{ tag }}</span>
                        {% endfor %}
                    </div>
                    {% endif %}
                    <a href="{{ post.url }}" class="read-more">
                        Read More
                        <svg viewBox="0 0 24 24" fill="currentColor">
                            <path d="M4,11V13H16L10.5,18.5L11.92,19.92L19.84,12L11.92,4.08L10.5,5.5L16,11H4Z"/>
                        </svg>
                    </a>
                </div>
            </article>
            {% endfor %}
        </div>
        <div id="noResults" class="no-results card" style="display: none;">
            <h3>No posts found</h3>
            <p>Try selecting different tags or clearing your filters.</p>
        </div>
    </div>
</div>

<style>
.blog-filter-page {
    padding: 2rem 0 4rem;
}

.filter-controls {
    padding: 2rem;
    margin-bottom: 2rem;
}

.filter-controls h3 {
    color: var(--primary-bright);
    margin-bottom: 1.5rem;
    font-size: 1.3rem;
}

.tag-filters {
    display: flex;
    flex-wrap: wrap;
    gap: 1rem;
    margin-bottom: 1.5rem;
}

.tag-checkbox {
    display: flex;
    align-items: center;
    cursor: pointer;
    transition: all 0.3s ease;
}

.tag-checkbox input[type="checkbox"] {
    display: none;
}

.tag-label {
    background: var(--surface-hover);
    color: var(--text-muted);
    padding: 0.5rem 1rem;
    border-radius: 25px;
    font-size: 0.9rem;
    font-weight: 500;
    transition: all 0.3s ease;
    border: 2px solid transparent;
}

.tag-checkbox:hover .tag-label {
    background: var(--primary-dim);
    color: var(--primary-bright);
    transform: translateY(-2px);
}

.tag-checkbox input[type="checkbox"]:checked + .tag-label {
    background: var(--primary);
    color: white;
    border-color: var(--primary-bright);
    transform: translateY(-2px);
    box-shadow: 0 4px 12px rgba(var(--primary-rgb), 0.3);
}

.filter-actions {
    display: flex;
    justify-content: space-between;
    align-items: center;
    padding-top: 1rem;
    border-top: 1px solid var(--border);
}

.btn-secondary {
    padding: 0.5rem 1rem;
    background: var(--surface);
    color: var(--text);
    text-decoration: none;
    border: 2px solid var(--border);
    border-radius: 6px;
    font-weight: 600;
    cursor: pointer;
    transition: all 0.3s ease;
}

.btn-secondary:hover {
    background: var(--surface-hover);
    border-color: var(--primary);
    color: var(--primary);
}

.result-count {
    color: var(--text-muted);
    font-weight: 500;
}

.blog-grid {
    display: flex;
    flex-direction: column;
    gap: 2rem;
}

.blog-post {
    padding: 2rem;
    transition: all 0.3s ease;
}

.blog-post:hover {
    border-color: var(--primary-dim);
    transform: translateY(-2px);
}

.blog-post.hidden {
    display: none;
}

.post-header {
    margin-bottom: 1.5rem;
}

.post-meta {
    display: flex;
    gap: 1rem;
    align-items: center;
    margin-bottom: 1rem;
    font-size: 0.9rem;
}

.post-meta time {
    color: var(--text-muted);
}

.post-title {
    margin-bottom: 1rem;
}

.post-title a {
    color: var(--text);
    text-decoration: none;
    transition: color 0.3s ease;
}

.post-title a:hover {
    color: var(--primary-bright);
}

.post-excerpt {
    color: var(--text-muted);
    line-height: 1.6;
    margin: 0;
}

.post-footer {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-top: 1.5rem;
    padding-top: 1.5rem;
    border-top: 1px solid var(--border);
}

.post-tags {
    display: flex;
    gap: 0.5rem;
    flex-wrap: wrap;
}

.tag {
    background: var(--surface-hover);
    color: var(--text-muted);
    padding: 0.25rem 0.75rem;
    border-radius: 20px;
    font-size: 0.8rem;
    cursor: pointer;
    transition: all 0.3s ease;
}

.tag:hover {
    background: var(--primary-dim);
    color: var(--primary-bright);
}

.tag.active {
    background: var(--primary);
    color: white;
}

.read-more {
    display: flex;
    align-items: center;
    gap: 0.5rem;
    color: var(--primary);
    text-decoration: none;
    font-weight: 600;
    transition: all 0.3s ease;
}

.read-more:hover {
    color: var(--primary-bright);
    transform: translateX(5px);
}

.read-more svg {
    width: 16px;
    height: 16px;
}

.no-results {
    text-align: center;
    padding: 3rem 2rem;
}

.no-results h3 {
    color: var(--primary-bright);
    margin-bottom: 1rem;
}

@media (max-width: 768px) {
    .filter-actions {
        flex-direction: column;
        gap: 1rem;
        align-items: stretch;
    }

    .post-footer {
        flex-direction: column;
        gap: 1rem;
        align-items: flex-start;
    }

    .tag-filters {
        gap: 0.5rem;
    }
}
</style>

<script>
document.addEventListener('DOMContentLoaded', function() {
    const tagFilters = document.getElementById('tagFilters');
    const blogGrid = document.getElementById('blogGrid');
    const resultCount = document.getElementById('resultCount');
    const noResults = document.getElementById('noResults');
    const clearButton = document.getElementById('clearFilters');

    const posts = Array.from(blogGrid.querySelectorAll('.blog-post'));
    const totalPosts = posts.length;

    function updateDisplay() {
        const selectedTags = Array.from(tagFilters.querySelectorAll('input[type="checkbox"]:checked'))
            .map(input => input.value);

        let visibleCount = 0;

        posts.forEach(post => {
            const postTags = post.dataset.tags.split(',').filter(tag => tag.trim());

            // Check if post has ALL selected tags (AND logic)
            const hasAllTags = selectedTags.length === 0 ||
                selectedTags.every(selectedTag => postTags.includes(selectedTag));

            if (hasAllTags) {
                post.classList.remove('hidden');
                visibleCount++;
            } else {
                post.classList.add('hidden');
            }
        });

        // Update result count
        if (selectedTags.length === 0) {
            resultCount.textContent = `Showing all ${totalPosts} posts`;
        } else {
            resultCount.textContent = `Found ${visibleCount} posts with tags: ${selectedTags.join(', ')}`;
        }

        // Show/hide no results message
        if (visibleCount === 0 && selectedTags.length > 0) {
            noResults.style.display = 'block';
        } else {
            noResults.style.display = 'none';
        }

        // Update tag highlights in posts
        document.querySelectorAll('.post-tags .tag').forEach(tag => {
            if (selectedTags.includes(tag.dataset.tag)) {
                tag.classList.add('active');
            } else {
                tag.classList.remove('active');
            }
        });
    }

    // Add event listeners to checkboxes
    tagFilters.addEventListener('change', updateDisplay);

    // Clear filters button
    clearButton.addEventListener('click', function() {
        tagFilters.querySelectorAll('input[type="checkbox"]').forEach(input => {
            input.checked = false;
        });
        updateDisplay();
    });

    // Allow clicking on post tags to toggle them in filter
    document.addEventListener('click', function(e) {
        if (e.target.classList.contains('tag') && e.target.dataset.tag) {
            const tagValue = e.target.dataset.tag;
            const checkbox = tagFilters.querySelector(`input[value="${tagValue}"]`);
            if (checkbox) {
                checkbox.checked = !checkbox.checked;
                updateDisplay();
            }
        }
    });

    // Update URL with selected tags (optional)
    function updateURL() {
        const selectedTags = Array.from(tagFilters.querySelectorAll('input[type="checkbox"]:checked'))
            .map(input => input.value);

        const url = new URL(window.location);
        if (selectedTags.length > 0) {
            url.searchParams.set('tags', selectedTags.join(','));
        } else {
            url.searchParams.delete('tags');
        }

        // Update URL without reloading page
        window.history.replaceState({}, '', url);
    }

    // Load tags from URL on page load
    function loadFromURL() {
        const url = new URL(window.location);
        const tagParam = url.searchParams.get('tags');
        if (tagParam) {
            const tags = tagParam.split(',');
            tags.forEach(tag => {
                const checkbox = tagFilters.querySelector(`input[value="${tag.trim()}"]`);
                if (checkbox) {
                    checkbox.checked = true;
                }
            });
            updateDisplay();
        }
    }

    // Update URL when filters change
    tagFilters.addEventListener('change', updateURL);
    clearButton.addEventListener('click', updateURL);

    // Load initial state from URL
    loadFromURL();
});
</script>