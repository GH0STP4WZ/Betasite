<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.4/css/all.min.css">
<div class="profile-card card slide-up">
  <div class="profile-header">
    <div class="profile-avatar">
      <img src="https://api.lanyard.rest/801089753038061669.png" alt="GH0STP4WZ Avatar" class="avatar-image">
      <div class="avatar-ring"></div>
    </div>
    <div class="profile-info">
      <center>
        <h2 text-align="center" class="profile-name">GH0STP4WZ</h2>
        <p class="profile-subtitle">Demi-Girl ⛧ It/Its</p>
      </center>
    </div>
  </div>

  <div class="status-section" id="discord-status-container">
    <!-- Live Discord status will be injected here -->
  </div>

  <div class="badges-section">
    <img src="/assets/images/xeniaS.webp" alt="Powered by Linux" class="badge">
    <img src="/assets/images/child-safe.jpg" alt="Child Safe" class="badge">
  </div>
</div>

<script>
  {{ "" | safe }}
  // Lanyard Discord Status Script
  let previousActivities = {};
  let rotationAngles = {};
  let lastFrameTime = 0;
  const ROTATION_SPEED = 30;

  function updateRotations(currentTime) {
    if (!lastFrameTime) lastFrameTime = currentTime;
    const deltaTime = (currentTime - lastFrameTime) / 1000;
    lastFrameTime = currentTime;

    document.querySelectorAll('.rotating').forEach(element => {
      const activityId = element.closest('[data-activity-id]')?.getAttribute('data-activity-id');
      if (!rotationAngles[activityId]) rotationAngles[activityId] = 0;
      rotationAngles[activityId] = (rotationAngles[activityId] + ROTATION_SPEED * deltaTime) % 360;
      element.style.transform = `rotate(${rotationAngles[activityId]}deg)`;
    });

    requestAnimationFrame(updateRotations);
  }

  function activityChanged(oldActivity, newActivity) {
    if (!oldActivity || !newActivity) return true;
    return JSON.stringify(oldActivity) !== JSON.stringify(newActivity);
  }

  function createTruncatedElement(text, className) {
    return `<div class="text-truncate ${className}" title="${text.replace(/"/g, '&quot;')}">${text}</div>`;
  }

  function fetchDiscordStatus() {
    fetch('https://api.lanyard.rest/v1/users/801089753038061669')
      .then(response => response.json())
      .then(data => {
        if (data.success) updateDiscordStatus(data.data);
      })
      .catch(error => console.error('Error fetching Discord status:', error));
  }

  function getAssetUrl(activity, assetKey) {
    const asset = activity.assets?.[assetKey];
    if (!asset) return null;

    if (asset.startsWith('mp:external/')) {
      const externalUrl = asset.split('/').slice(2).join('/');
      return decodeURIComponent(externalUrl);
    }

    if (asset.startsWith('http://') || asset.startsWith('https://')) return asset;
    if (asset.startsWith('spotify:')) return `https://i.scdn.co/image/${asset.substring(8)}`;

    if (activity.application_id) {
      return `https://cdn.discordapp.com/app-assets/${activity.application_id}/${asset}`;
    }

    return asset;
  }

  function updateDiscordStatus(data) {
    const statusElement = document.getElementById('discord-status-container');
    let statusHTML = '';

    if (data.discord_status) {
      let statusIcon = '';
      let statusText = data.discord_status;
      switch(data.discord_status) {
        case 'online': statusIcon = '<span class="status-dot" style="color: var(--ctp-green);"> </span>'; statusText = 'Online'; break;
        case 'idle': statusIcon = '<span class="status-dot" style="color: var(--ctp-yellow);"> </span>'; statusText = 'Idle'; break;
        case 'dnd': statusIcon = '<span class="status-dot" style="color: var(--ctp-red);"> </span>'; statusText = 'Do Not Disturb'; break;
        default: statusIcon = '<span class="status-dot" style="color: var(--ctp-surface0);"> </span>'; statusText = 'Offline';
      }
      statusHTML += `<div class="status-line" style="color: ${statusIcon.match(/color: (.*?);/)[1]}">${statusIcon} ${statusText}</div>`;
    }

    const customStatus = data.activities.find(a => a.type === 4);
    if (customStatus && customStatus.state) {
      let emojiHTML = '';
      if (customStatus.emoji) {
        if (customStatus.emoji.id) {
          const animated = customStatus.emoji.animated ? 'gif' : 'png';
          emojiHTML = `<img style="height: 1em; vertical-align: middle; margin-right: 4px;" src="https://cdn.discordapp.com/emojis/${customStatus.emoji.id}.${animated}" alt="${customStatus.emoji.name}" title=":${customStatus.emoji.name}:" />`;
        } else {
          emojiHTML = `<span title=":${customStatus.emoji.name}:">${customStatus.emoji.name} </span>`;
        }
      }
      statusHTML += `<div class="status-message">${emojiHTML}${customStatus.state}</div>`;
    }

    const activities = data.activities.filter(a => a.type !== 4);
    let activitiesHTML = '';

    if (activities.length > 0) {
      activities.forEach(activity => {
        const activityId = `${activity.type}-${activity.name}`;
        if (!activityChanged(previousActivities[activityId], activity)) {
          const existing = document.querySelector(`[data-activity-id="${activityId}"]`);
          if (existing) {
            activitiesHTML += existing.outerHTML;
            return;
          }
        }

        switch(activity.type) {
          case 2: {
            const musicImage = getAssetUrl(activity, 'large_image') || '';
            const currentRotation = rotationAngles[activityId] || 0;
            activitiesHTML += `
              <div class="activity spotify" data-activity-id="${activityId}">
                <div class="activity-header"><i class="fas fa-music"></i> Listening to ${activity.name}</div>
                <div class="activity-content">
                  ${musicImage ?
                    `<img src="${musicImage}" class="activity-img rotating" style="transform: rotate(${currentRotation}deg)" />` :
                    `<div class="placeholder-img rotating" style="transform: rotate(${currentRotation}deg)">♪</div>`}
                  <div class="activity-details">
                    ${createTruncatedElement(activity.details || 'Unknown song', 'song-title')}
                    ${createTruncatedElement(activity.state || 'Unknown artist', 'song-artist')}
                    ${activity.assets?.large_text ? createTruncatedElement(activity.assets.large_text, 'song-album') : ''}
                  </div>
                </div>
              </div>`;
            break;
          }

          default:
            // You can handle other activity types here if you want!
            break;
        }

        previousActivities[activityId] = activity;
      });

      statusHTML += `<div class="activities-container">${activitiesHTML}</div>`;
    } else if (data.discord_status !== 'offline') {
      statusHTML += '<div class="activity-none">Not doing anything</div>';
    }

    statusElement.innerHTML = statusHTML || 'Offline';
  }

  fetchDiscordStatus();
  setInterval(fetchDiscordStatus, 5000);
  requestAnimationFrame(updateRotations);
</script>
<script src="https://unpkg.com/twemoji@14.0.2/dist/twemoji.min.js" crossorigin="anonymous"></script>

<style>
/* ========== Profile Layout (unchanged parts kept for context) ========== */
.profile-card {
    max-width: 350px;
    background: linear-gradient(135deg, var(--surface) 0%, var(--surface-hover) 100%);
    border: 2px solid var(--primary-dim);
    border-radius: 10px;
    overflow: hidden;
    position: relative;
}

/* ========== Avatar ========== */
.avatar-image {
   width: 250px;
   height: 250px;
   border-radius: 50%;
   display: block;
   margin-left: auto;
   margin-right: auto;
}
.avatar-ring {
    background-color: var(--ctp-red);
    animation: pulse 2s ease-in-out infinite;
}

/* ========== Status Section ========== */
.status-section, #discord-status-container {
    margin-bottom: 1.5rem;
    max-height: 300px;
    overflow-y: auto;
    padding-right: 0.5rem;
    scrollbar-width: thin;
}

.status-line {
    display: flex;
    align-items: center;
    gap: 0.5rem;
    margin-bottom: 1rem;
    padding: 0.75rem;
    background: var(--surface-hover);
    border-radius: 8px;
    border-left: 3px solid currentColor; /* This makes it follow the dot color */
    color: var(--ctp-red); /* Default; overridden by JS */
}

/* Status Dot */
.status-dot {
    width: 12px;
    height: 12px;
    border-radius: 50%;
    display: inline-block;
    animation: glow 2s ease-in-out infinite alternate;
}

/* ========== Custom Status Message ========== */
.status-message {
    padding: 0.5rem 0.75rem;
    background: var(--surface-hover);
    border-radius: 8px;
    margin-bottom: 1rem;
    color: var(--text);
    border-left: 3px solid var(--ctp-blue);
}

/* ========== Activities Layout ========== */
.activities-container {
    display: flex;
    flex-direction: column;
    gap: 1rem;
}

/* Each activity */
.activity {
    display: flex;
    flex-direction: column;
    background: var(--surface-hover);
    border-radius: 8px;
    padding: 0.75rem;
    border-left: 3px solid var(--ctp-green);
}

/* Header */
.activity-header {
    font-weight: bold;
    margin-bottom: 0.5rem;
    color: var(--ctp-green);
}

/* Content layout: album left, info right */
.activity-content {
    display: flex;
    gap: 0.75rem;
    align-items: center;
}

/* Rotating album art */
.activity.spotify .activity-img,
.activity.spotify .placeholder-img {
    width: 64px;
    height: 64px;
    border-radius: 50%;
    background: var(--surface);
    object-fit: cover;
}

/* Details text block */
.activity-details {
    flex-grow: 1;
    display: flex;
    flex-direction: column;
    gap: 0.2rem;
}

/* Individual lines */
.song-title {
    font-weight: bold;
    color: var(--text);
}

.song-artist,
.song-album {
    color: var(--text-muted);
    font-size: 0.85rem;
}

/* Truncate long lines with ellipsis */
.text-truncate {
    white-space: nowrap;
    overflow: hidden;
    text-overflow: ellipsis;
}

/* ========== Badges Section ========== */
.badges-section {
    display: flex;
    gap: 0.5rem;
    justify-content: center;
}

.badge {
    height: 30px;
    width: auto;
    border-radius: 4px;
    transition: transform 0.3s ease;
}

.badge:hover {
    transform: scale(1.1);
}

/* ========== Animations ========== */
@keyframes pulse {
    0%, 100% { opacity: 0.5; transform: scale(1); }
    50% { opacity: 1; transform: scale(1.05); }
}

@keyframes glow {
    0% { box-shadow: 0 0 5px currentColor; }
    100% { box-shadow: 0 0 15px currentColor, 0 0 25px currentColor; }
}

@keyframes spin {
    from { transform: rotate(0deg); }
    to { transform: rotate(360deg); }
}

</style>
